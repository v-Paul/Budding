<UserControl x:Class="Bitcoiner.CSBMutiCombox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Bitcoiner"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300" >
    <UserControl.Resources>
        <!--ComboBox-->
        <!--ComBoBox项选中背景色-->
        <SolidColorBrush x:Key="ComboBoxSelectdBackground" Color="White"/>
        <!--ComBoBox项鼠标经过背景色-->
        <SolidColorBrush x:Key="ComboBoxMouseOverBackground" Color="White"/>
        <!--ComBoBox项选中前景色-->
        <SolidColorBrush x:Key="ComboBoxSelectedForeground" Color="#fab915"/>
        <!--ComBoBox项鼠标经过前景色-->
        <SolidColorBrush x:Key="ComboBoxMouseOverForegrond" Color="Black"/>
        <!--
        <Style TargetType="ComboBoxItem">
            <Setter Property="Height" Value="40"/>
            <Setter Property="Background" Value="Black"/>
            <Setter Property="Foreground" Value="#fab915"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate  TargetType="{x:Type ComboBoxItem}">
                        <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                            <Border x:Name="_borderbg" Background="{TemplateBinding Background}" BorderBrush="#fab915" BorderThickness="1"/>
                            <TextBlock Margin="5,0" VerticalAlignment="Center" x:Name="_txt" Foreground="#fab915" Text="{Binding Content,RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Border x:Name="_border" Background="White" Opacity="0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="_borderbg" Property="Background" Value="{StaticResource ComboBoxSelectdBackground}" />
                                <Setter TargetName="_txt" Property="Foreground" Value="{StaticResource ComboBoxSelectedForeground}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="false"/>
                                    <Condition Property="IsMouseOver" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="_borderbg" Property="Background" Value="{StaticResource ComboBoxMouseOverBackground}" />
                                <Setter TargetName="_txt" Property="Foreground" Value="{StaticResource ComboBoxMouseOverForegrond}"/>
                            </MultiTrigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
       -->
        
        <Style TargetType="{x:Type CheckBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="False" />
            <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
            <Setter Property="Height" Value="25"/>
            <Setter Property="IsChecked" Value="False"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Grid Margin="0" Width="300">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Height}">
                                <Rectangle x:Name="CheckBoxRectangle" Width="15" Height="15" Fill="Transparent" Opacity="0.3" RadiusY="0" RadiusX="0"/>
                                <Rectangle x:Name="CheckBoxRectangleOut" Width="15" Height="15"  Stroke="#fab915" StrokeThickness="1" RadiusY="0" RadiusX="0"/>
                                <Grid x:Name="CheckedMark" Width="20" Height="20" Visibility="Collapsed">
                                    <Path SnapsToDevicePixels="False" StrokeThickness="2" Data="M1,9 L8,17" Stroke="White"/>
                                    <Path SnapsToDevicePixels="False" StrokeThickness="2" Data="M8,17 L20,4" Stroke="White"/>
                                </Grid>
                            </Grid>
                            <TextBlock Grid.Column="1" Text="{Binding Path=Title}" FontSize="18" Foreground="#fab915" VerticalAlignment="Center" Margin="14,0,0,0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckedMark" Property="Visibility" Value="Visible"></Setter>
                                <Setter TargetName="CheckBoxRectangle" Property="Fill" Value="Transparent"></Setter>
                                <!--<Setter TargetName="CheckBoxRectangle" Property="Opacity" Value="1"></Setter>-->
                                <Setter TargetName="CheckBoxRectangleOut" Property="Stroke" Value="#fab915"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>
    <ComboBox
        Background="Black"
        x:Name="MultiSelectCombo"  
        SnapsToDevicePixels="True"
        OverridesDefaultStyle="True"
        ScrollViewer.HorizontalScrollBarVisibility="Auto"
        ScrollViewer.VerticalScrollBarVisibility="Auto"
        ScrollViewer.CanContentScroll="True"
        IsSynchronizedWithCurrentItem="True"
        >

        <!-- 设置ComboBox下拉列表Item的样式模板 -->
        <ComboBox.ItemTemplate>
      
            <ItemContainerTemplate>
                <CheckBox Content="{Binding Title}" IsChecked="{Binding Path=IsSelected, Mode=TwoWay}" Tag="{RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}" Click="CheckBox_Click"/>
            </ItemContainerTemplate>
 
        </ComboBox.ItemTemplate>
        <!--<ComboBox.ItemContainerStyle>
            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="Height" Value="40"/>
            </Style>
        </ComboBox.ItemContainerStyle>-->
        <!-- 设置整个ComboBox的样式模板 -->
        <!-- 该样式模板由两部分组成，一个是ToggleButton,一个是Popup -->
        <ComboBox.Template>
            <ControlTemplate TargetType="ComboBox">
                <Grid>
                    <!-- 设置ToggleButton的样式模板，IsChecked：该属性与Combox下拉列表是否打开的状态绑定 -->
                    <ToggleButton x:Name="ToggleButton" Grid.ColumnSpan="2" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                        Focusable="false" ClickMode="Press"  HorizontalContentAlignment="Center" >
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <Grid>

                                    <!-- 该Grid分为两列，一列放多选的显示文本，一列放箭头图标 -->
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="18"/>
                                    </Grid.ColumnDefinitions>

                                    <!-- Border相当于html中的Span标签， ColumnSpan：该Border跨两列，CornerRadius：设置ToggleButton圆角样式的弧度。按代码位置，该Border在最上层。-->
                                    <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="5" Background="Black" BorderBrush="Black" BorderThickness="1,1,1,1">
                                    </Border>

                                    <!-- 该Border绑定了一个TextBlock(文本块)，TextBlock绑定.xaml.cs文件中的Text属性。Text显示的是多选的内容 -->
                                    <Border x:Name="BorderComp" Grid.Column="0" Background="black" BorderBrush="#a29c9e" CornerRadius="5"  BorderThickness="0" >
                                        <TextBlock Foreground="#fab915"  VerticalAlignment="Center" Text="{Binding Path=Text,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Padding="3" />
                                    </Border>

                                    <!-- 用来显示上下箭头的 -->
                                    <!--<Path x:Name="Arrow" Grid.Column="1" Stroke="#fab915" HorizontalAlignment="Center" VerticalAlignment="Center" />-->
                                    <Path x:Name="Arrow" Grid.Column="1" Margin="3,0"  Data="M 0 0  6 6 12 0 Z"  VerticalAlignment="Center" HorizontalAlignment="Right" Stretch="None" Fill="#fab915" />
                                </Grid>

                                <!-- 触发器，如果ToggleButton的IsChecked属性为false，显示像下箭头，如果ToggleButton的IsChecked属性为True，显示像上箭头 -->
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsChecked" Value="false">
                                        <Setter Property="Data" TargetName="Arrow" Value="M 1 5 L 8 12 L 15 5"></Setter>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Data" TargetName="Arrow" Value="M 1 12 L 8 5 L 15 12"></Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>

                            </ControlTemplate>

                        </ToggleButton.Template>

                    </ToggleButton>

                    <!-- 设置Popup的样式模板，IsOpen:该属性与ComboBox下拉列表是否打开的属性绑定，Placement：Popup弹出位置，在底部；AllowsTransparency：获取或设置一个值,该值表示 Popup 控件是否可以包含透明的部分 -->
                    <!-- Popup是弹出框，类似于Windows的开始菜单，点击一下，弹出来，在点击一下收回去 -->
                    <Popup Name="Popup" Placement="Bottom" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="Slide">
                        <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border x:Name="DropDownBorder" BorderThickness="1" Background="Black" BorderBrush="Black"/>

                            <!-- 添加滚动条 -->
                            <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" DataContext="{Binding}">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>
                        </Grid>
                    </Popup>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasItems" Value="false">
                        <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                    </Trigger>

                    <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                        <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>
                        <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </ComboBox.Template>
    </ComboBox>
</UserControl>
